
plan:
  . update the readme.md
  . 

rustGOL:
  . directly storing b'x' and stuff in board and using the 2 buffer method might be faster
    than the current method (only if no. of alive cells is high)
    . go through 1 buffer completely, while updating the other buffer and then directly print and swap buffers
    . current one needs 1 board with u8 and another for string representation of board
      and another for storing x and y indices 2*usize (high memory usage)
    . this one only needs 2 u8 arrays for storing string representation of board
  . try using the unsafe get_unchecked_mut pointer or something (for array/vec)
    . check how much performance difference (i saw it in multiple implementations)
  . time/performance profiling
    . doing this on android is causing trouble (termux sym-links)
  . try openCL/openGL on this
  . vectors are fast too + they dont do segmentation crashes unless the vec is very big
  . 

pyGOL:
  . 

maybe:
  . implement the rust implementation in
    . python - just to see if its faster than the last
    . go - to see how fast rust/go is (also multi-thread)
  . 

todo features:
  . a consistant board for benchmark instead of randomised
  . a better way to display cells:
    . a graphics library solution instead of curses
    . some kinda interactive play
  . ability to slow dows the tick rate (something like wait(200ms - start):
  . use █ as a live cell, and black version of that ('\33[30m█\33[0m') as dead cell, (dosent work in curses)
  . 